import { V2 } from "./math/V2";
import { V3 } from "./math/V3";
import { M3 } from "./math/M3";
import { Joint3D } from "./core/Joint3D";
import { Bone3D } from "./core/Bone3D";
import { Chain3D } from "./core/Chain3D";
import { Structure3D } from "./core/Structure3D";
import { Joint2D } from "./core/Joint2D";
import { Bone2D } from "./core/Bone2D";
import { Chain2D } from "./core/Chain2D";
import { Structure2D } from "./core/Structure2D";
import { IKSolver } from "./solver/IKSolver";
import { HISolver } from "./solver/HISolver";
export declare const FIK: {
    REVISION: string;
    X_AXE: V3;
    Y_AXE: V3;
    Z_AXE: V3;
    X_NEG: V3;
    Y_NEG: V3;
    Z_NEG: V3;
    UP: V2;
    DOWN: V2;
    LEFT: V2;
    RIGHT: V2;
    math: {
        PI: number;
        toRad: number;
        toDeg: number;
        pi90: number;
        twoPI: number;
        findAngle: (b0: any, b1: any) => any;
        clamp: (v: any, min: any, max: any) => any;
        lerp: (x: any, y: any, t: any) => number;
        rand: (low: any, high: any) => any;
        randInt: (low: any, high: any) => any;
        nearEquals: (a: any, b: any, t: any) => boolean;
        perpendicular: (a: any, b: any) => boolean;
        genPerpendicularVectorQuick: (v: any) => any;
        genPerpendicularVectorFrisvad: (v: any) => any;
        rotateXDegs: (v: any, angle: any) => any;
        rotateYDegs: (v: any, angle: any) => any;
        rotateZDegs: (v: any, angle: any) => any;
        withinManhattanDistance: (v1: any, v2: any, distance: any) => boolean;
        manhattanDistanceBetween: (v1: any, v2: any) => number;
        distanceBetween: (v1: any, v2: any) => number;
        unwrapDeg: (r: any) => number;
        unwrapRad: (r: any) => number;
        rotateDegs: (v: any, angle: any) => any;
        validateDirectionUV: (directionUV: any) => void;
        validateLength: (length: any) => void;
    };
    V2: typeof V2;
    V3: typeof V3;
    M3: typeof M3;
    Bone3D: typeof Bone3D;
    Chain3D: typeof Chain3D;
    Joint3D: typeof Joint3D;
    Structure3D: typeof Structure3D;
    Bone2D: typeof Bone2D;
    Chain2D: typeof Chain2D;
    Joint2D: typeof Joint2D;
    Structure2D: typeof Structure2D;
    IKSolver: typeof IKSolver;
    HISolver: typeof HISolver;
};
