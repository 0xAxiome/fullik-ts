import { V2 } from "../math/V2";
export declare class Chain2D {
    private isChain2D;
    tmpTarget: V2;
    bones: any[];
    name: string;
    solveDistanceThreshold: number;
    minIterationChange: number;
    maxIteration: number;
    precision: number;
    chainLength: number;
    numBones: number;
    baseLocation: V2;
    fixedBaseMode: boolean;
    baseboneConstraintType: number;
    baseboneConstraintUV: V2;
    baseboneRelativeConstraintUV: V2;
    lastTargetLocation: V2;
    lastBaseLocation: V2;
    boneConnectionPoint: number;
    currentSolveDistance: number;
    connectedChainNumber: number;
    connectedBoneNumber: number;
    color: any;
    embeddedTarget: V2;
    useEmbeddedTarget: boolean;
    constructor(color?: any);
    clone(): Chain2D;
    clear(): void;
    addBone(bone: any): void;
    removeBone(id: any): void;
    addConsecutiveBone(directionUV: any, length: any, clockwiseDegs: any, anticlockwiseDegs: any, color?: any): void;
    getBoneConnectionPoint(): number;
    getConnectedBoneNumber(): number;
    getConnectedChainNumber(): number;
    getEmbeddedTarget(): V2;
    getBaseboneConstraintType(): number;
    getBaseboneConstraintUV(): V2;
    getBaseLocation(): any;
    getEffectorLocation(): any;
    getLastTargetLocation(): V2;
    getLiveChainLength(): number;
    setColor(color: any): void;
    setBaseboneRelativeConstraintUV(constraintUV: any): void;
    setConnectedBoneNumber(boneNumber: any): void;
    setConnectedChainNumber(chainNumber: any): void;
    setBoneConnectionPoint(point: any): void;
    setBaseboneConstraintUV(constraintUV: any): void;
    setBaseLocation(baseLocation: any): void;
    setBaseboneConstraintType(value: any): void;
    setFixedBaseMode(value: any): void;
    setMaxIterationAttempts(maxIteration: any): void;
    setMinIterationChange(minIterationChange: any): void;
    setSolveDistanceThreshold(solveDistance: any): void;
    solveForEmbeddedTarget(): number;
    resetTarget(): void;
    solveForTarget(t: any): number;
    solveIK(target: any): any;
    updateChainLength(): void;
    cloneBones(): any[];
}
